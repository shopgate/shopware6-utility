{
  "info": {
    "_postman_id": "50d491c4-7e96-4418-937f-eb6017ffddfa",
    "name": "SW6 - Connect/Engage",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "5289226"
  },
  "item": [
    {
      "name": "setup",
      "item": [
        {
          "name": "init",
          "item": [
            {
              "name": "SWA: get sales channel",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get Main Sales Channel data\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data[0].name).to.be.eq('Storefront');\r",
                      "    pm.environment.set(\"gen_salesChannel_id\", jsonData.data[0].id);\r",
                      "    pm.environment.set(\"gen_salesChannel_accessKey\", jsonData.data[0].accessKey);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Storefront\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/sales-channel",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "sales-channel"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SWA: enable wishlist",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"configurationKey\": \"core.cart.wishlistEnabled\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/sync",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "sync"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "prod",
          "item": [
            {
              "name": "SWA: get variant child",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get child ID\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    const child = jsonData.data.filter(product => product.attributes.productNumber === 'SWDEMO10005.3');\r",
                      "    pm.expect(child).length(1, 'Should have found a child product');\r",
                      "    pm.environment.set('gen_product_variant_child_id', child[0].id);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_api}}/product/{{catalog_product_variant}}/children",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "product",
                    "{{catalog_product_variant}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SWA: create no stock prod",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Product created\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_noStock_id}}\",\r\n        \"name\" : \"API: out of stock product\",\r\n        \"productNumber\" : \"SG.CONNECT.DEMO.NO.STOCK.01\",\r\n        \"stock\": 0,\r\n        \"isCloseout\": true,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "clone",
                    "product",
                    "{{catalog_product_advPrices_id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SWA: create no stock backorder prod",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Product created\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_noStock_backorder_id}}\",\r\n        \"name\" : \"API: out of stock backorder product\",\r\n        \"productNumber\" : \"SG.CONNECT.DEMO.NO.STOCK.BACKORDER\",\r\n        \"stock\": 0,\r\n        \"isCloseout\": false,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/clone/product/{{created_product_noStock_id}}",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "clone",
                    "product",
                    "{{created_product_noStock_id}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "promo",
          "item": [
            {
              "name": "3 item coupon",
              "item": [
                {
                  "name": "SWA: create 3 item code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created entity successfully\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{created_promotion_3item_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API EXT: promo 3item code\",\r\n    \"code\": \"{{created_promotion_3item_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 1.73\r\n        }\r\n    ],\r\n    \"salesChannels\":[\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/promotion",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "promotion"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SWA: create 3 item rule",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// marked as temp because of ticket SGSW6-88\r",
                          "pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {
                      "accept": true
                    }
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"create-rules\": {\r\n        \"entity\": \"rule\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_rule_3item_id}}\",\r\n                \"name\": \"API EXT: Main Product 3 qty rule\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"andContainer\",\r\n                        \"value\": null,\r\n                        \"children\": [\r\n                            {\r\n                                \"type\": \"cartLineItemWithQuantity\",\r\n                                \"value\": {\r\n                                    \"id\": \"{{catalog_product_main_id}}\",\r\n                                    \"operator\": \"=\",\r\n                                    \"quantity\": 3\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"priority\": 11\r\n            }\r\n        ]\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/_action/sync",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "_action",
                        "sync"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SWA: cart condition to 3 item promo",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created entity successfully\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"promotionId\": \"{{created_promotion_3item_id}}\",\r\n    \"ruleId\": \"{{created_rule_3item_id}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/promotion-cart-rule",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "promotion-cart-rule"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "5 item rule",
              "item": [
                {
                  "name": "SWA: create 5 item rule",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// marked as temp because of ticket SGSW6-88\r",
                          "pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {
                      "accept": true
                    }
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"create-rules\": {\r\n        \"entity\": \"rule\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_rule_5item_id}}\",\r\n                \"name\": \"API EXT: Main Product 5 qty rule\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"andContainer\",\r\n                        \"value\": null,\r\n                        \"children\": [\r\n                            {\r\n                                \"type\": \"cartLineItemWithQuantity\",\r\n                                \"value\": {\r\n                                    \"id\": \"{{catalog_product_main_id}}\",\r\n                                    \"operator\": \"=\",\r\n                                    \"quantity\": 5\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"priority\": 11\r\n            }\r\n        ]\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/_action/sync",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "_action",
                        "sync"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SWA: create 5 item promo",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created entity successfully\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{created_promotion_5item_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API EXT: promo main prod 5 qty\",\r\n    \"code\": null,\r\n    \"exclusive\": false,\r\n    \"useCodes\": false,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"percentage\",\r\n            \"value\": 10\r\n        }\r\n    ],\r\n    \"salesChannels\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/promotion",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "promotion"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SWA: cart condition to 5 item promo",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created entity successfully\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"promotionId\": \"{{created_promotion_5item_id}}\",\r\n    \"ruleId\": \"{{created_rule_5item_id}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/promotion-cart-rule",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "promotion-cart-rule"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "4+ & 6- rule",
              "item": [
                {
                  "name": "SWA: create 4+ item rule",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// marked as temp because of ticket SGSW6-88\r",
                          "pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {
                      "accept": true
                    }
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"create-rules\": {\r\n        \"entity\": \"rule\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_rule_4itemPlus_id}}\",\r\n                \"name\": \"API EXT: Main Product 4+ & -6 qty rule\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"andContainer\",\r\n                        \"value\": null,\r\n                        \"children\": [\r\n                            {\r\n                                \"type\": \"cartLineItemWithQuantity\",\r\n                                \"value\": {\r\n                                    \"id\": \"{{catalog_product_main_id}}\",\r\n                                    \"operator\": \">\",\r\n                                    \"quantity\": 4\r\n                                }\r\n                            },\r\n                            {\r\n                                \"type\": \"cartLineItemWithQuantity\",\r\n                                \"value\": {\r\n                                    \"id\": \"{{catalog_product_main_id}}\",\r\n                                    \"operator\": \"<\",\r\n                                    \"quantity\": 6\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"priority\": 12\r\n            }\r\n        ]\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/_action/sync",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "_action",
                        "sync"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SWA: create 4+ item promo",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created entity successfully\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{created_promotion_4itemPlus_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API EXT: promo main prod 4+ & 6- qty\",\r\n    \"code\": null,\r\n    \"exclusive\": false,\r\n    \"useCodes\": false,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"fixed_unit\",\r\n            \"value\": 450\r\n        }\r\n    ],\r\n    \"salesChannels\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/promotion",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "promotion"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "SWA: cart condition to 4 item promo",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Created entity successfully\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{gen_access_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"promotionId\": \"{{created_promotion_4itemPlus_id}}\",\r\n    \"ruleId\": \"{{created_rule_4itemPlus_id}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_api}}/promotion-cart-rule",
                      "host": [
                        "{{sw_endpoint_api}}"
                      ],
                      "path": [
                        "promotion-cart-rule"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "SWA: create coupon code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created entity successfully\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"{{created_promotion_byCode_id}}\",\r\n    \"active\": true,\r\n    \"translations\": {\r\n        \"en-GB\": {\r\n            \"name\": \"API EXT: promo by code\"\r\n        },\r\n        \"de-DE\": {\r\n            \"name\": \"API EXT: promo by code (DE)\"\r\n        }\r\n    },\r\n    \"code\": \"{{created_promotion_byCode_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 2.25\r\n        }\r\n    ],\r\n    \"salesChannels\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/promotion",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "promotion"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "SWA: create customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Product created\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_customer2_id}}\",\r\n        \"firstName\" : \"API: customer 2\",\r\n        \"email\": \"{{created_customer2_email}}\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_endpoint_api}}/_action/clone/customer/:customerId",
              "host": [
                "{{sw_endpoint_api}}"
              ],
              "path": [
                "_action",
                "clone",
                "customer",
                ":customerId"
              ],
              "variable": [
                {
                  "key": "customerId",
                  "value": "{{customer_default_id}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "/**",
              " * SW Token generation",
              " */",
              "var getToken = true;",
              "if (!pm.environment.get('gen_token_expires') || !pm.environment.get('gen_access_token')) {",
              "    console.log('Token or expiry date are missing');",
              "} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
              "    console.log('Token is expired');",
              "} else {",
              "    getToken = false;",
              "}",
              "",
              "if (getToken === true) {",
              "    const createRequest = {",
              "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
              "        \"grant_type\": \"password\",",
              "        \"scopes\": \"write\",",
              "        \"username\": pm.environment.get(\"sw_admin\"),",
              "        \"password\": pm.environment.get(\"sw_pass\")",
              "    };",
              "    const refreshRequest = {",
              "        \"grant_type\": \"refresh_token\",",
              "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
              "        \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
              "    };",
              "    // SW Auth",
              "    const authRequest = {",
              "        url: pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_auth\"))),",
              "        method: 'POST',",
              "        header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
              "        body: {",
              "            mode: 'application/json'",
              "        }",
              "    };",
              "    // set body depending on type of request needed",
              "    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
              "    pm.sendRequest(authRequest, function (err, res) {",
              "        if (res.code !== 200) {",
              "            pm.environment.unset('gen_access_token');",
              "            pm.environment.unset('gen_token_expires');",
              "            pm.environment.unset('gen_refresh_token');",
              "            console.log('Invalidated refresh token');",
              "            return;",
              "        }",
              "        ",
              "        var responseJson = res.json();",
              "        pm.environment.set('gen_access_token', responseJson.access_token)",
              "",
              "        var expiryDate = new Date();",
              "        expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
              "        pm.environment.set('gen_token_expires', expiryDate.getTime());",
              "        pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
              "        console.log('Saved the token and expiry date');",
              "    });",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "update",
      "item": [
        {
          "name": "new cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_new}}",
              "host": [
                "{{domain}}{{endpoint_cart_new}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "addProducts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_add}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_add}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json()\r",
                  "pm.test('that the cart is not empty', () => {\r",
                  "    pm.expect(response).to.be.an('object').and.not.empty\r",
                  "    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
                  "    pm.expect(response.cartItems.length).to.equal(2)\r",
                  "})\r",
                  "\r",
                  "pm.test('the first product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(1)\r",
                  "    pm.environment.set('gen_lineItem_main_1', lineItem.id)\r",
                  "})\r",
                  "\r",
                  "pm.test('the second product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_advPrices_id'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(1)\r",
                  "    pm.environment.set('gen_lineItem_advPrices_1', lineItem.id)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_get}}",
              "host": [
                "{{domain}}{{endpoint_cart_get}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateProduct 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"CartItem\": [\r\n        {\r\n            \"cartItemId\": \"{{gen_lineItem_main_1}}\",\r\n            \"quantity\": 2\r\n        },\r\n        {\r\n            \"CartItemId\": \"{{gen_lineItem_advPrices_1}}\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_update}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_update}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json()\r",
                  "pm.test('that the cart is not empty', () => {\r",
                  "    pm.expect(response).to.be.an('object').and.not.empty\r",
                  "    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
                  "    pm.expect(response.cartItems.length).to.equal(2)\r",
                  "})\r",
                  "\r",
                  "pm.test('the first product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(2)\r",
                  "})\r",
                  "\r",
                  "pm.test('the second product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_advPrices_id'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(3)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_get}}",
              "host": [
                "{{domain}}{{endpoint_cart_get}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "update (max stock)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500\", function () {\r",
                  "    pm.response.to.have.status(500);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"cartItems\": [\r\n        {\r\n            \"cartItemId\": \"{{gen_lineItem_main_1}}\",\r\n            \"quantity\": 9999\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_update}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_update}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getCart (max stock)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json()\r",
                  "pm.test('that the cart is not empty', () => {\r",
                  "    pm.expect(response).to.be.an('object').and.not.empty\r",
                  "    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
                  "    pm.expect(response.cartItems.length).to.equal(2)\r",
                  "})\r",
                  "\r",
                  "pm.test('the first product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(100)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_get}}",
              "host": [
                "{{domain}}{{endpoint_cart_get}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "delete",
      "item": [
        {
          "name": "new cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_new}}",
              "host": [
                "{{domain}}{{endpoint_cart_new}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "addProducts 1 (2x)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_add}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_add}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "addProducts 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_freeShip}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_add}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_add}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json()\r",
                  "pm.test('that the cart is not empty anymore', () => {\r",
                  "    pm.expect(response).to.be.an('object').and.not.empty\r",
                  "    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
                  "    pm.expect(response.cartItems.length).to.equal(3)\r",
                  "})\r",
                  "\r",
                  "pm.test('the first product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(1)\r",
                  "    pm.environment.set('gen_lineItem_main_2', lineItem.id)\r",
                  "})\r",
                  "\r",
                  "pm.test('the second product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_advPrices_id'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(1)\r",
                  "    pm.environment.set('gen_lineItem_advPrices_2', lineItem.id)\r",
                  "})\r",
                  "\r",
                  "pm.test('the third product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_freeShip'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(1)\r",
                  "    pm.environment.set('gen_lineItem_freeShip_2', lineItem.id)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_get}}",
              "host": [
                "{{domain}}{{endpoint_cart_get}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('that the request succeeded', () => {",
                  "    pm.response.to.have.status(200)",
                  "    pm.expect(pm.response.json()).to.be.an('object').and.empty",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"CartItemIds\": [\n        \"{{gen_lineItem_main_2}}\",\n        \"{{gen_lineItem_freeShip_2}}\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_delete}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_delete}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json()\r",
                  "pm.test('that the cart is not empty', () => {\r",
                  "    pm.expect(response).to.be.an('object').and.not.empty\r",
                  "    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
                  "    pm.expect(response.cartItems.length).to.equal(1)\r",
                  "})\r",
                  "\r",
                  "pm.test('the second product is in the cart', () => {\r",
                  "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_advPrices_id'))\r",
                  "    pm.expect(lineItem).to.be.an('object')\r",
                  "    pm.expect(lineItem.quantity).to.eq(1)\r",
                  "    pm.environment.unset('gen_lineItem_main_2')\r",
                  "    pm.environment.unset('gen_lineItem_freeShip_2')\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_get}}",
              "host": [
                "{{domain}}{{endpoint_cart_get}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('that the request succeeded', () => {",
                  "    pm.response.to.have.status(200)",
                  "    pm.expect(pm.response.json()).to.be.an('object').and.empty",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"cartItemIds\": [\n        \"{{gen_lineItem_advPrices_2}}\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_delete}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_delete}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json()\r",
                  "pm.test('that the cart is not empty', () => {\r",
                  "    pm.expect(response).to.be.an('object').and.not.empty\r",
                  "    pm.expect(response.cartItems).to.be.an('array')\r",
                  "    pm.expect(response.cartItems.length).to.equal(0)\r",
                  "    pm.environment.unset('gen_lineItem_advPrices_2')\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_get}}",
              "host": [
                "{{domain}}{{endpoint_cart_get}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Errors",
      "item": [
        {
          "name": "addProducts (disabled)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"check error\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.error.code).to.eql('ECART');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_disabled}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_add}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_add}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete no exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"check error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.code).to.eql('ECART');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"CartItemIds\": [\n        \"a389bd9d710c437a990565dd2e803f66\"\n    ]\n}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_delete}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_delete}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "update no exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"check error\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.error.code).to.eql('ECART');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"CartItem\": [\r\n        {\r\n            \"cartItemId\": \"7013a4d06c194e6c8117192f137dc24a\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_products_update}}",
              "host": [
                "{{domain}}{{endpoint_cart_products_update}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "addCoupons no exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// if cart has no items, it will be 200\r",
                  "// if it does have items, it will be an error\r",
                  "pm.test(\"Status code is 500\", function () {\r",
                  "    pm.response.to.have.status(500);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"couponCodes\": [\r\n        \"LALA\"\r\n    ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{domain}}{{endpoint_cart_coupons_add}}",
              "host": [
                "{{domain}}{{endpoint_cart_coupons_add}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "coupons",
      "item": [
        {
          "name": "Code & Rule",
          "item": [
            {
              "name": "new cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_new}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_new}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addProducts",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_products_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_products_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addCoupons",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 500\", function () {\r",
                      "    pm.response.to.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Check we get a notice of coupon added\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.error.errors[0].code).to.eql('EPROMOADDED');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_byCode_code}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_coupons_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_coupons_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (check coupon)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(1);\r",
                      "})\r",
                      "pm.test('the first coupon is in the cart', () => {\r",
                      "    const lineItem = response.cartItems.find(item => item.coupon?.code === pm.environment.get('created_promotion_byCode_code'))\r",
                      "    pm.expect(lineItem).to.be.an('object')\r",
                      "    pm.expect(lineItem.quantity).to.eq(1)\r",
                      "    pm.expect(lineItem.type).to.eq('coupon')\r",
                      "    pm.expect(lineItem.coupon.label).to.contain('API EXT: promo by code')\r",
                      "    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
                      "    pm.expect(lineItem.coupon.savedPrice.value).to.eq(2.25)\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addProducts",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 4\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_products_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_products_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (check promo)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(3);\r",
                      "})\r",
                      "pm.test('the first coupon is in the cart', () => {\r",
                      "    const lineItem = response.cartItems.find(item => item.coupon?.savedPrice?.type === 'percentage')\r",
                      "    pm.expect(lineItem).to.be.an('object', 'should have found line item')\r",
                      "    pm.expect(lineItem.quantity).to.eq(1)\r",
                      "    pm.expect(lineItem.type).to.eq('coupon')\r",
                      "    pm.expect(lineItem.coupon.savedPrice.type).to.eq('percentage')\r",
                      "    pm.expect(lineItem.coupon.savedPrice.value).to.eq(10)\r",
                      "    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo main prod 5 qty')\r",
                      "    pm.environment.set('gen_lineItem_rule5_id', lineItem.id);\r",
                      "})\r",
                      "\r",
                      "const discountTotal = response.totals.find(total => total.type === 'discount');\r",
                      "pm.test('check totals', () => {\r",
                      "    pm.expect(discountTotal.amount).to.eq(479.98)\r",
                      "    pm.expect(discountTotal.subTotals).to.to.have.length(3)\r",
                      "})\r",
                      "\r",
                      "pm.test('check discount totals', () => {\r",
                      "    const percentDiscount = discountTotal.subTotals.find(total => total.label === 'API EXT: promo main prod 5 qty')\r",
                      "    pm.expect(percentDiscount).to.be.an('object', 'Should have found discount')\r",
                      "    pm.expect(percentDiscount.amount).to.eq(247.98)\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete coupon",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_byCode_code}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_coupons_delete}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_coupons_delete}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (no coupon)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check product count', () => {\r",
                      "    const products = response.cartItems.filter(item => item.type === 'product')\r",
                      "    pm.expect(products).to.have.length(1);\r",
                      "})\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(2);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Rule",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{gen_lineItem_rule5_id}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_coupons_delete}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_coupons_delete}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (no rule)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check product count', () => {\r",
                      "    const products = response.cartItems.filter(item => item.type === 'product')\r",
                      "    pm.expect(products).to.have.length(1);\r",
                      "})\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(1);\r",
                      "    pm.environment.unset(\"gen_lineItem_rule5_id\");\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Saved coupon (by code)",
          "item": [
            {
              "name": "new cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_new}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_new}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addProducts",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_products_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_products_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addCoupons",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 500\", function () {\r",
                      "    pm.response.to.have.status(500);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_coupons_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_coupons_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (check no coupon)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(0);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addProducts",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_products_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_products_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (check coupon)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(1);\r",
                      "})\r",
                      "pm.test('the first coupon is in the cart', () => {\r",
                      "    const lineItem = response.cartItems.find(item => item.coupon?.code === pm.environment.get('created_promotion_3item_code'))\r",
                      "    pm.expect(lineItem).to.be.an('object')\r",
                      "    pm.expect(lineItem.quantity).to.eq(1)\r",
                      "    pm.expect(lineItem.type).to.eq('coupon')\r",
                      "    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo 3item code')\r",
                      "    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
                      "    pm.expect(lineItem.coupon.savedPrice.value).to.eq(1.73)\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete coupon",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_coupons_delete}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_coupons_delete}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (no coupon)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check product count', () => {\r",
                      "    const products = response.cartItems.filter(item => item.type === 'product')\r",
                      "    pm.expect(products).to.have.length(1);\r",
                      "})\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(0);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Tests coupon caching & ability to manually remove.\n\nRemove by code (this seems to have been working before, but found not to be when testing because removal can be also done by ID, see SW6M-31)"
        },
        {
          "name": "Saved coupon (by id)",
          "item": [
            {
              "name": "new cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_new}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_new}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addProducts",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_products_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_products_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addCoupons",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 500\", function () {\r",
                      "    pm.response.to.have.status(500);\r",
                      "});\r",
                      "pm.test(\"Check we get a notice of coupon added\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.error.errors[0].code).to.eql('EPROMOADDED');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_coupons_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_coupons_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (check coupon)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(1);\r",
                      "})\r",
                      "pm.test('the first coupon is in the cart', () => {\r",
                      "    const lineItem = response.cartItems.find(item => item.coupon?.code === pm.environment.get('created_promotion_3item_code'))\r",
                      "    pm.expect(lineItem).to.be.an('object')\r",
                      "    pm.expect(lineItem.quantity).to.eq(1)\r",
                      "    pm.expect(lineItem.type).to.eq('coupon')\r",
                      "    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo 3item code')\r",
                      "    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
                      "    pm.expect(lineItem.coupon.savedPrice.value).to.eq(1.73)\r",
                      "    pm.environment.set('gen_lineItem_promoThree_id', lineItem.id);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete coupon",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{gen_lineItem_promoThree_id}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_coupons_delete}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_coupons_delete}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (no coupon)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check product count', () => {\r",
                      "    const products = response.cartItems.filter(item => item.type === 'product')\r",
                      "    pm.expect(products).to.have.length(1);\r",
                      "})\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(0);\r",
                      "    pm.environment.unset('gen_lineItem_promoThree_id');\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Remove coupon by ID"
        },
        {
          "name": "Empty cart coupon",
          "item": [
            {
              "name": "add",
              "item": [
                {
                  "name": "new cart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_new}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_new}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "addCoupons",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_coupons_add}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_coupons_add}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "addProducts (1)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_products_add}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_products_add}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "addProducts (2)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_products_add}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_products_add}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "getCart (check coupon)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "const response = pm.response.json()\r",
                          "\r",
                          "pm.test('check coupon count', () => {\r",
                          "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                          "    pm.expect(coupons).to.have.length(1);\r",
                          "})\r",
                          "pm.test('the first coupon is in the cart', () => {\r",
                          "    const lineItem = response.cartItems.find(item => item.coupon?.code === pm.environment.get('created_promotion_3item_code'))\r",
                          "    pm.expect(lineItem).to.be.an('object')\r",
                          "    pm.expect(lineItem.quantity).to.eq(1)\r",
                          "    pm.expect(lineItem.type).to.eq('coupon')\r",
                          "    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo 3item code')\r",
                          "    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
                          "    pm.expect(lineItem.coupon.savedPrice.value).to.eq(1.73)\r",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_get}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_get}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "update",
              "item": [
                {
                  "name": "new cart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_new}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_new}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "addCoupons",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_coupons_add}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_coupons_add}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "addProducts (1)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_products_add}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_products_add}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "getCart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const response = pm.response.json()\r",
                          "pm.test('that the cart is not empty', () => {\r",
                          "    pm.expect(response).to.be.an('object').and.not.empty\r",
                          "    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
                          "    pm.expect(response.cartItems.length).to.equal(1)\r",
                          "})\r",
                          "\r",
                          "pm.test('the first product is in the cart', () => {\r",
                          "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
                          "    pm.expect(lineItem).to.be.an('object')\r",
                          "    pm.expect(lineItem.quantity).to.eq(1)\r",
                          "    pm.environment.set('gen_lineItem_main_2', lineItem.id)\r",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_get}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_get}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "updateProduct 1",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 500\", function () {\r",
                          "    pm.response.to.have.status(500);\r",
                          "});\r",
                          "pm.test(\"Check we get a notice of coupon added\", function () {\r",
                          "    var jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData.error.errors[0].code).to.eql('EPROMOADDED');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"CartItem\": [\r\n        {\r\n            \"cartItemId\": \"{{gen_lineItem_main_2}}\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_products_update}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_products_update}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "getCart (check coupon)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "const response = pm.response.json()\r",
                          "\r",
                          "pm.test('check coupon count', () => {\r",
                          "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                          "    pm.expect(coupons).to.have.length(1);\r",
                          "})\r",
                          "pm.test('the first coupon is in the cart', () => {\r",
                          "    const lineItem = response.cartItems.find(item => item.coupon?.code === pm.environment.get('created_promotion_3item_code'))\r",
                          "    pm.expect(lineItem).to.be.an('object')\r",
                          "    pm.expect(lineItem.quantity).to.eq(1)\r",
                          "    pm.expect(lineItem.type).to.eq('coupon')\r",
                          "    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo 3item code')\r",
                          "    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
                          "    pm.expect(lineItem.coupon.savedPrice.value).to.eq(1.73)\r",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_cart_get}}",
                      "host": [
                        "{{domain}}{{endpoint_cart_get}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Rule Auto-remove",
          "item": [
            {
              "name": "new cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_new}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_new}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "addProducts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 5\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_products_add}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_products_add}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (check promo)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(2);\r",
                      "})\r",
                      "pm.test('the first product is in the cart', () => {\r",
                      "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
                      "    pm.expect(lineItem).to.be.an('object')\r",
                      "    pm.expect(lineItem.quantity).to.eq(5)\r",
                      "    pm.environment.set('gen_lineItem_main_3', lineItem.id)\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "update to qty 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"cartItems\": [\r\n        {\r\n            \"cartItemId\": \"{{gen_lineItem_main_3}}\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_products_update}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_products_update}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getCart (check promo)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "const response = pm.response.json()\r",
                      "\r",
                      "pm.test('check coupon count', () => {\r",
                      "    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
                      "    pm.expect(coupons).to.have.length(0);\r",
                      "})\r",
                      "pm.test('the first product is in the cart', () => {\r",
                      "    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
                      "    pm.expect(lineItem).to.be.an('object')\r",
                      "    pm.expect(lineItem.quantity).to.eq(2)\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_cart_get}}",
                  "host": [
                    "{{domain}}{{endpoint_cart_get}}"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "user",
      "item": [
        {
          "name": "login",
          "item": [
            {
              "name": "guest",
              "item": [
                {
                  "name": "customerLogout",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Success property is a boolean\", function () {\r",
                          "    const jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData).to.haveOwnProperty('success').to.be.a('boolean');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_user_logout}}",
                      "host": [
                        "{{domain}}{{endpoint_user_logout}}"
                      ]
                    },
                    "description": "customerLogout"
                  },
                  "response": []
                },
                {
                  "name": "getUser",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var jsonData = pm.response.json();",
                          "pm.test(\"User not logged in error, cannot retrieve data\", function () {",
                          "    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_user_get}}",
                      "host": [
                        "{{domain}}{{endpoint_user_get}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "bad login",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 500\", function () {\r",
                          "    pm.response.to.have.status(500);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"No login\", function () {\r",
                          "    const jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData).to.haveOwnProperty('error');\r",
                          "    pm.expect(jsonData.error.code).to.eq('EBADCREDENTIALS')\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"incorrect-pass\"\n    }\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_user_login}}",
                      "host": [
                        "{{domain}}{{endpoint_user_login}}"
                      ]
                    },
                    "description": "customerLogin"
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "customer",
              "item": [
                {
                  "name": "customerLogin",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Success property is not empty\", function () {\r",
                          "    const jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData).to.haveOwnProperty('success').to.be.eq(true);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_user_login}}",
                      "host": [
                        "{{domain}}{{endpoint_user_login}}"
                      ]
                    },
                    "description": "customerLogin"
                  },
                  "response": []
                },
                {
                  "name": "getUser",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const response = pm.response.json();",
                          "const user = response;",
                          "",
                          "pm.test(\"Status code is 200\", function() {",
                          "    pm.response.to.have.status(200);",
                          "})",
                          "pm.test(\"Test if response is okay, with body and json\", function() {",
                          "    pm.response.to.be.ok,",
                          "        pm.response.to.be.with.body,",
                          "        pm.response.to.be.json;",
                          "});",
                          "",
                          "pm.test(\"Make sure all required user data was properly set\", function() {",
                          "    pm.expect(user.id).to.be.a('string', 'ID - not a string provided!').to.not.be.empty;",
                          "    pm.expect(user.mail).to.be.a('string', 'Mail - not a string provided!').to.not.be.empty;",
                          "});",
                          "",
                          "pm.test(\"Make sure all optional string based user data was properly set in the right format\", function() {",
                          "    const generalKeys = [",
                          "        'firstName',",
                          "        'lastName'",
                          "    ];",
                          "    generalKeys.map(function(item) {",
                          "        pm.expect(user[item]).to.be.a('string', item + ' - Not a string provided!');",
                          "    });",
                          "});",
                          "",
                          "pm.test(\"Make sure the userGroups are set as array\", function() {",
                          "    pm.expect(user.userGroups).to.be.a('array');",
                          "});",
                          "",
                          "// pm.test(\"Make sure the customAttributes are set as object\", function() {",
                          "//     pm.expect(user.customAttributes).to.be.a('object');",
                          "// });",
                          "",
                          "pm.test(\"Make sure that user Groups is set has an property id and name with the right string based value\", function() {",
                          "    const testUserGroup = user.userGroups.pop();",
                          "    pm.expect(testUserGroup).to.have.property('id');",
                          "    pm.expect(testUserGroup).to.have.property('name');",
                          "    pm.expect(testUserGroup.id).to.be.a('string', 'ID - not a string provided!');",
                          "    pm.expect(testUserGroup.name).to.be.a('string', 'Name - not a string provided!');",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_user_get}}",
                      "host": [
                        "{{domain}}{{endpoint_user_get}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "register",
              "item": [
                {
                  "name": "customerLogout",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Success property is a boolean\", function () {\r",
                          "    const jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData).to.haveOwnProperty('success').to.be.a('boolean');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_user_logout}}",
                      "host": [
                        "{{domain}}{{endpoint_user_logout}}"
                      ]
                    },
                    "description": "customerLogout"
                  },
                  "response": []
                },
                {
                  "name": "SWS: log in a customer",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Context Token returned\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.contextToken).to.be.a('string');",
                          "    pm.environment.set(\"gen_context_token\", jsonData.contextToken);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{gen_salesChannel_accessKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "sw-access-key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "description": "(Required) Content type of the request",
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "description": "(Required) Accepted response content types",
                        "key": "Accept",
                        "value": "application/json"
                      },
                      {
                        "key": "sw-context-token",
                        "value": "test",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"username\": \"{{created_customer2_email}}\",\n  \"password\": \"{{password}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_endpoint_store_api}}/account/login",
                      "host": [
                        "{{sw_endpoint_store_api}}"
                      ],
                      "path": [
                        "account",
                        "login"
                      ]
                    },
                    "description": "Logs in customers given their credentials."
                  },
                  "response": [
                    {
                      "name": "A successful login returns a context token which is associated with the logged in user. Use that as your `sw-context-token` header for subsequent requests.",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "description": "Added as a part of security scheme: apikey",
                            "key": "sw-access-key",
                            "value": "{{apiKey}}"
                          },
                          {
                            "description": "(Required) Content type of the request",
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "description": "(Required) Accepted response content types",
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"username\": \"aliquip\",\n  \"password\": \"aliqua mollit\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/account/login",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "account",
                            "login"
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n  \"contextToken\": \"officia sit minim sunt\"\n}"
                    },
                    {
                      "name": "If credentials are incorrect an error is returned",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "description": "Added as a part of security scheme: apikey",
                            "key": "sw-access-key",
                            "value": "{{apiKey}}"
                          },
                          {
                            "description": "(Required) Content type of the request",
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "description": "(Required) Accepted response content types",
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"username\": \"aliquip\",\n  \"password\": \"aliqua mollit\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/account/login",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            "account",
                            "login"
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n  \"errors\": [\n    {\n      \"id\": \"elit deserunt anim\",\n      \"links\": {\n        \"non_41c\": \"https://amphPntjNrPIvATAKBdNNmy.sqbwr6Pr17dylNZJ2ie+kQY5w\"\n      },\n      \"status\": \"cupidatat consequat do Ut in\",\n      \"code\": \"minim mollit Lorem ullamco\",\n      \"title\": \"Lorem aute in\",\n      \"detail\": \"Ut non\",\n      \"source\": {\n        \"pointer\": \"magna deserunt\",\n        \"parameter\": \"dolor voluptate velit laboris\"\n      },\n      \"meta\": {\n        \"exercitation2_1\": -7211244\n      }\n    },\n    {\n      \"id\": \"consequat ut\",\n      \"links\": {\n        \"anim_71\": \"http://qGzMxoQxaKpAKg.sjQ-bSkAHUB.lcqBMrKSSo+fOvgiNtoEVllGbQX8uGNDrAUHqIZrL+9?flsk&\"\n      },\n      \"status\": \"veniam et\",\n      \"code\": \"aliqua sed\",\n      \"title\": \"Lorem consequat\",\n      \"detail\": \"ex sit in\",\n      \"source\": {\n        \"pointer\": \"ut in\",\n        \"parameter\": \"occaecat do Lorem ullamco esse\"\n      },\n      \"meta\": {\n        \"laborum_e\": \"consequat veniam tempor\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"adba\": -33550490,\n    \"eu__2\": \"in\"\n  },\n  \"links\": {\n    \"fugiat22\": \"https://dLXCZjVIaxFC.haegj8MMpow,Zl.b\"\n  }\n}"
                    }
                  ]
                },
                {
                  "name": "customerLogin via context",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Success property is not empty\", function () {\r",
                          "    const jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData).to.haveOwnProperty('success').to.be.eq(true);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"strategy\": \"auth_code\",\n    \"parameters\": {\n        \"code\": \"{{gen_context_token}}\"\n    }\n}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_user_login}}",
                      "host": [
                        "{{domain}}{{endpoint_user_login}}"
                      ]
                    },
                    "description": "customerLogin"
                  },
                  "response": []
                },
                {
                  "name": "getUser",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const response = pm.response.json();",
                          "const user = response;",
                          "",
                          "pm.test(\"Status code is 200\", function() {",
                          "    pm.response.to.have.status(200);",
                          "})",
                          "pm.test(\"Test if response is okay, with body and json\", function() {",
                          "    pm.response.to.be.ok,",
                          "        pm.response.to.be.with.body,",
                          "        pm.response.to.be.json;",
                          "});",
                          "",
                          "pm.test(\"Make sure all required user data was properly set\", function() {",
                          "    pm.expect(user.id).to.be.a('string', 'ID - not a string provided!').to.be.eq(pm.environment.get('created_customer2_id'));",
                          "    pm.expect(user.mail).to.be.a('string', 'Mail - not a string provided!').to.eql(pm.environment.get('created_customer2_email'));",
                          "});",
                          "",
                          "pm.test(\"Make sure all optional string based user data was properly set in the right format\", function() {",
                          "    const generalKeys = [",
                          "        'firstName',",
                          "        'lastName'",
                          "    ];",
                          "    generalKeys.map(function(item) {",
                          "        pm.expect(user[item]).to.be.a('string', item + ' - Not a string provided!');",
                          "    });",
                          "});",
                          "",
                          "pm.test(\"Make sure the userGroups are set as array\", function() {",
                          "    pm.expect(user.userGroups).to.be.a('array');",
                          "});",
                          "",
                          "// pm.test(\"Make sure the customAttributes are set as object\", function() {",
                          "//     pm.expect(user.customAttributes).to.be.a('object');",
                          "// });"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{}"
                    },
                    "url": {
                      "raw": "{{domain}}{{endpoint_user_get}}",
                      "host": [
                        "{{domain}}{{endpoint_user_get}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "getCheckoutUrl",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "})",
                  "",
                  "pm.test(\"has url\", function() {",
                  "    pm.expect(response.url).to.be.a('string').to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_checkout_url_get}}",
              "host": [
                "{{domain}}{{endpoint_checkout_url_get}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getRegistrationUrl",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "})",
                  "",
                  "pm.test(\"has url\", function() {",
                  "    pm.expect(response.url).to.be.a('string').to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{domain}}{{endpoint_user_registrationUrl_get}}",
              "host": [
                "{{domain}}{{endpoint_user_registrationUrl_get}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "favorites",
      "item": [
        {
          "name": "guest",
          "item": [
            {
              "name": "customerLogout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Success property is a boolean\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.haveOwnProperty('success').to.be.a('boolean');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_logout}}",
                  "host": [
                    "{{domain}}{{endpoint_user_logout}}"
                  ]
                },
                "description": "customerLogout"
              },
              "response": []
            },
            {
              "name": "status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Test if backend is running\"] = jsonResponse.status === 'is running';\r",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{domain}}/status",
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "status"
                  ]
                },
                "description": "Smoke http call to make sure platform backend is running"
              },
              "response": []
            },
            {
              "name": "getFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Products are  array\"] = Array.isArray(jsonResponse.products);\r",
                      "\r",
                      "tests[\"Products are empty\"] = jsonResponse.products.length === 0;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_get}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_get}}"
                  ]
                },
                "description": "Get favorite items of anonymous user.\nTest if list is empty"
              },
              "response": []
            },
            {
              "name": "addFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"productId\": [\"{{catalog_product_main_id}}\"]\r\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_add}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_add}}"
                  ]
                },
                "description": "Add favorite item `productId` to anonymous user."
              },
              "response": []
            },
            {
              "name": "getFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Products are of array type\"] = Array.isArray(jsonResponse.products);\r",
                      "\r",
                      "tests[\"Products count: 1\"] = jsonResponse.products.length === 1;\r",
                      "\r",
                      "tests[\"Product is found\"] = false;\r",
                      "jsonResponse.products.forEach( function(product) { \r",
                      "    if (product.id === postman.getEnvironmentVariable(\"catalog_product_main_id\")) {\r",
                      "     tests[\"Product is found\"] = true;\r",
                      "    }\r",
                      "} );"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_get}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_get}}"
                  ]
                },
                "description": "Get favorite items for anonymous user.\nTest if we have `productId` in a list."
              },
              "response": []
            },
            {
              "name": "deleteFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"productId\": [\"{{catalog_product_main_id}}\"]\r\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_delete}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_delete}}"
                  ]
                },
                "description": "Delete `productId` from favorite items of anonymous user"
              },
              "response": []
            },
            {
              "name": "getFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Products are  array\"] = Array.isArray(jsonResponse.products);\r",
                      "\r",
                      "tests[\"Products are empty\"] = jsonResponse.products.length === 0;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_get}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_get}}"
                  ]
                },
                "description": "Get favorites to test if `productId` is removed from a list"
              },
              "response": []
            }
          ]
        },
        {
          "name": "customer",
          "item": [
            {
              "name": "addFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"productId\": [\"{{catalog_product_main_id}}\"]\r\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_add}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_add}}"
                  ]
                },
                "description": "Add favorite item `productId` to anonymous user before login action"
              },
              "response": []
            },
            {
              "name": "login_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Login is success\"] = jsonResponse.success === true;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"strategy\": \"basic\",\r\n\t\"parameters\": {\r\n\t\t\"login\": \"{{username}}\",\r\n\t\t\"password\": \"{{password}}\"\r\n\t}\r\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_login}}",
                  "host": [
                    "{{domain}}{{endpoint_user_login}}"
                  ]
                },
                "description": "Login user.\nAfter this step we assum that anymous favorite items are migrated to logged in user.\nTest is login is success."
              },
              "response": []
            },
            {
              "name": "getFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Products are of array type\"] = Array.isArray(jsonResponse.products);\r",
                      "\r",
                      "tests[\"Products count: 1\"] = jsonResponse.products.length === 1;\r",
                      "\r",
                      "tests[\"Product is found\"] = false;\r",
                      "jsonResponse.products.forEach( function(product) { \r",
                      "    if (product.id === postman.getEnvironmentVariable(\"catalog_product_main_id\")) {\r",
                      "     tests[\"Product is found\"] = true;\r",
                      "    }\r",
                      "} );"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_get}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_get}}"
                  ]
                },
                "description": "Get favorite items for recently logged in user.\nTest if we have `productId` in a list."
              },
              "response": []
            },
            {
              "name": "deleteFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"productId\": [\"{{catalog_product_main_id}}\"]\r\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_delete}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_delete}}"
                  ]
                },
                "description": "Delete `productId` from favorite items of logged in user"
              },
              "response": []
            },
            {
              "name": "getFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Products are  array\"] = Array.isArray(jsonResponse.products);\r",
                      "\r",
                      "tests[\"Products are empty\"] = jsonResponse.products.length === 0;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_get}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_get}}"
                  ]
                },
                "description": "Get favorites to test if `productId` is removed from a list"
              },
              "response": []
            },
            {
              "name": "addFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"productId\": [\"{{catalog_product_main_id}}\"]\r\n}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_add}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_add}}"
                  ]
                },
                "description": "Add favorite item `productId` to logged in user before logout action"
              },
              "response": []
            },
            {
              "name": "logout_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Logout is success\"] = jsonResponse.success === true;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_logout}}",
                  "host": [
                    "{{domain}}{{endpoint_user_logout}}"
                  ]
                },
                "description": "Logout.\nTest if logout is success"
              },
              "response": []
            },
            {
              "name": "getFavorites_v1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "tests[\"Response code is 200\"] = responseCode.code === 200;\r",
                      "\r",
                      "tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");\r",
                      "\r",
                      "var jsonResponse = JSON.parse(responseBody);\r",
                      "\r",
                      "tests[\"Products are  array\"] = Array.isArray(jsonResponse.products);\r",
                      "\r",
                      "tests[\"Products are empty\"] = jsonResponse.products.length === 0;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{domain}}{{endpoint_user_favorites_get}}",
                  "host": [
                    "{{domain}}{{endpoint_user_favorites_get}}"
                  ]
                },
                "description": "Get favorites.\nTest if list is empty after user is logged out"
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{gen_access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "/**",
          " * SW Token generation",
          " */",
          "var getToken = true;",
          "if (!pm.environment.get('gen_token_expires') || !pm.environment.get('gen_access_token')) {",
          "    console.log('Token or expiry date are missing');",
          "} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
          "    console.log('Token is expired');",
          "} else {",
          "    getToken = false;",
          "}",
          "",
          "if (getToken === true) {",
          "    const createRequest = {",
          "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
          "        \"grant_type\": \"password\",",
          "        \"scopes\": \"write\",",
          "        \"username\": pm.environment.get(\"sw_admin\"),",
          "        \"password\": pm.environment.get(\"sw_pass\")",
          "    };",
          "    const refreshRequest = {",
          "        \"grant_type\": \"refresh_token\",",
          "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
          "        \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
          "    };",
          "    // SW Auth",
          "    const authRequest = {",
          "        url: pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_auth\"))),",
          "        method: 'POST',",
          "        header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
          "        body: {",
          "            mode: 'application/json'",
          "        }",
          "    };",
          "    // set body depending on type of request needed",
          "    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
          "    pm.sendRequest(authRequest, function (err, res) {",
          "        if (res.code !== 200) {",
          "            pm.environment.unset('gen_access_token');",
          "            pm.environment.unset('gen_token_expires');",
          "            pm.environment.unset('gen_refresh_token');",
          "            console.log('Invalidated refresh token');",
          "            return;",
          "        }",
          "        ",
          "        var responseJson = res.json();",
          "        pm.environment.set('gen_access_token', responseJson.access_token)",
          "",
          "        var expiryDate = new Date();",
          "        expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
          "        pm.environment.set('gen_token_expires', expiryDate.getTime());",
          "        pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
          "        console.log('Saved the token and expiry date');",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// remove generated token data if not authorized",
          "if (pm.response.code === 401) {",
          "    console.log('Removing tokens due to 401 response. Please try again.');",
          "    pm.environment.unset('gen_access_token');",
          "    pm.environment.unset('gen_token_expires');",
          "    pm.environment.unset('gen_refresh_token');",
          "}"
        ]
      }
    }
  ]
}
